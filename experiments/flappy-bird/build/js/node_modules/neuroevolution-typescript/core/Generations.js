"use strict";
/**
* @author       Eric Kuhn <digit.sensitivee@gmail.com>
* @copyright    2017 Eric Kuhn
* @license      Eric Kuhn
*/
Object.defineProperty(exports, "__esModule", { value: true });
var Generation_1 = require("./Generation");
var Network_1 = require("./Network");
var Generations = (function () {
    function Generations(_ne) {
        /* init parameters */
        this.generations = [];
        this.currentGeneration = new Generation_1.Generation(_ne);
        this.ne = _ne;
    }
    Generations.prototype.getGenerations = function () { return this.generations; };
    /**
     * Create the first generation
     * @param  {[type]} _input   [Input layer]
     * @param  {[type]} _hiddens [Hidden layer(s)]
     * @param  {[type]} _output  [Output layer]
     * @return {[type]}          [First Generation]
     */
    Generations.prototype.firstGeneration = function (_input, _hiddens, _output) {
        /* FIXME input, hiddens, output unused */
        var out = [];
        for (var i = 0; i < this.ne.getAParams().population; i++) {
            /* generate the Network and save it */
            var nn = new Network_1.Network();
            nn.perceptronGeneration(this.ne.getAParams().network[0], this.ne.getAParams().network[1], this.ne.getAParams().network[2]);
            out.push(nn.getSave());
        }
        this.generations.push(new Generation_1.Generation(this.ne));
        return out;
    };
    /**
     * Create the next Generation.
     */
    Generations.prototype.nextGeneration = function () {
        if (this.generations.length == 0) {
            /* need to create first generation */
            return [];
        }
        var gen = this.generations[this.generations.length - 1].generateNextGeneration();
        this.generations.push(new Generation_1.Generation(this.ne));
        return gen;
    };
    /**
     * Add a genome to the Generations
     * @param  {[type]} genome [Genome]
     * @return {[type]}        [False if no Generations to add to]
     */
    Generations.prototype.addGenome = function (genome) {
        /* cant add to a Generation if there are no Generations */
        if (this.generations.length == 0) {
            return false;
        }
        // FIXME addGenome retuerns void.
        return this.generations[this.generations.length - 1].addGenome(genome);
    };
    return Generations;
}());
exports.Generations = Generations;
